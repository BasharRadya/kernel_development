F0 module proposal - Wordle chardev

Overview: Our module will implement the popular game Wordle in a character device.
The user will write their guesses to the device, which will in turn provide feedback
as in the classic game of Wordle.

This module will create an entry in `/dev` that will serve as the interface through
which the game is played.

The file will show up in `/dev` as a file named `wordle`.

The file will be owned by user `root` and group `root`.

The permissions for the file will be rw-rw-rw-.

All operations return -ENOMEM in case of memory allocation errors and -EINVAL when provided pointers to bad memory.

Whenever return values are unspecified in the case of success, they will follow the standard behavior described in
the manual pages of the relevant system calls.

Operations:
	- Open:
		* Select a new random word of default length (5) and allow the default number of guesses (6).
		* If the device is already open, return -EBUSY to avoid multiple processes interfering with
		each other's games.
	- Write:
		* Concatenate the user's input to the current guess and advance the f_pos accordingly (assuming none of
		the following errors occur).
		* If the length of the result of the concatenation is over the current word length, return -EMSGSIZE.
		* If the user's input contains characters which are not in the range `a-z` or `A-Z`, return -EINVAL.
		* If there is available feedback, return -EAGAIN. (see Read)
	- Read:
		* Return feedback to the user.
		* Copy the color-coded feedback from the current f_pos into the buffer provided by the user (if no error occurs).
		Each character is colored green (\033[0;32m) if it is correctly placed, yellow (\033[0;33m) if it appears in the
		secret word, but not at its current position, and red (Red \033[0;31m) if it does not appear in the word.
		* If there is no feedback available, copy the current guess into the user's buffer. Undefined characters in the
		guess are represented by `?`.
		* If the user's buffer is not long enough to contain the data, copy
		as much as possible.
		* Advance the f_pos according to the number of bytes read.
	- Seek:
		* Move the f_pos to the requested location, within bounds.
		* If there is no available feedback and the result of applying the user's `whence` would be outside the
		writing buffer, return -EINVAL.
		* Similarly, if there is available feedback and the result of applying the user's `whence` would be
		outside the reading buffer, return -EINVAL.
	- Ioctl:
		* There are 6 operations: reset game, get/set word length, get/set number of allowed guesses, submit guess,
		clear feedback, get statistics.
		* Reset game: clear the state of the game and select a new random word.
		* Get/set word length: modify or read the length of the secret word. Changes apply from the next game onwards.
			- If the user attempts to set the word length to an unsupported value, return -EINVAL.
		* Get/set number of allowed guesses: modify or read the permitted number of guesses in a single round of the game.
		Changes apply from the next game onwards.
		* Submit guess: generate feedback for the current guess.
			- If there are undefined characters in the current guess, return -EBADMSG.
			- If the current guess is not in the game dictionary, return -EILSEQ.
		* Clear feedback: move on to the next guess.
			- If there is no feedback to clear, return -ENODATA.
		* Get statistics: the user provides a buffer of size 4*n (n is given as a parameter). The i-th DWORD of the buffer
		is filled with the number of games won after exactly i guesses, other than the n-th DWORD, which contains the number
		of games won after at least n guess. A lost or reset game is considered `won after infinity guesses`.
			- If n = 0, return -EINVAL.