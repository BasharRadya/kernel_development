### Note
This file is written in the [markdown](https://en.wikipedia.org/wiki/Markdown) format and is a `txt` file for technical reasons.

# General
This character device is a Rubik's Cube of size 3x3x3.

The cube will have 6 colors each one represented by a number, so a cube's colors will be `[0,1,2,3,4,5]`.

The way to rotate the cube will be using the `write` syscall and using the [standard Rubik's Cube notation](https://ruwix.com/the-rubiks-cube/notation/).
The way to get the cube's status will be via the `read` syscall.
The `ioctl` will be used for meta commands such as shuffling the cube or resting it.

## Module initialization and cleanup
### Initialization
Creates a character device in the path `/dev/cube` with user `root` and group `root`, and permissions of 644.
Sets up initial cube's state. Where:
* The up face is of color 0
* The left face is of color 1
* The front face is of color 2
* The right face is of color 3
* The back face is of color 4
* The down face is of color 5

The cube's state is persistent throughout the time that module is loaded (as if a physical cube as connected to the machine).

### Cleanup
When the module is removed you should free all the memory used to persist the cube state.

## syscalls

### `open(2)`
The `open` syscall does not have any effect on the state of the cube.
Note: In case multiple processes open the file simultaneously they all share the same state, for more info see the Concurrency section.

### `ioctl(2)`
Used to make meta actions on the cube, each specified the following flags:
* `CUBE_SETUP`- Get's one argument of type `unsigned short`, this command first setup the cube in a solved state (with the same color pattern specified in `Initialization`) and then it makes random moves as the number passed to the syscall. If it was passed 0, the cube should be in a solved state. If it was passed `N`, the cube will be setup in the solved state and then `N` random moves will be done to it. Return 0 on successful completion and otherwise -1.
* `CUBE_IS_SOLVED`- Allows to read a `unsigned short`, it should be 1 if the cube is in solved state (every face has a unique color on it), else 0. The syscall should return 0 on successful completion and otherwise -1.

#### Errors
* If `ioctl` is called with non of the flags mentioned here you should return -1 and set errno to `EINVAL`.
* If a pointer is passed to `ioctl` and it is a `NULL` you should return -1 and set errno to `EFAULT`.

### `write(2)`
Used to change the cube's state.

Reads a buffer passed by the user, with the following format.
The buffer should contain a list of moves separated by space character (there is no requirement for space after the last move).
Each move can be one of the 12 basic moves in the [standard Rubik's Cube notation](https://ruwix.com/the-rubiks-cube/notation/): `[F, R, U, L, B, D, F', R', U', L', B', D']`. "A single letter by itself refers to a clockwise face rotation in 90 degrees (quarter turn) (...) A letter followed by an apostrophe means to turn that face counterclockwise 90 degrees". If any of the values in the buffer is invalid the state of the cube should remain the same and you should return -1 and set errno to `EPERM`, otherwise return the number of moves done.

If the buffer is invalid you should return -1 and set errno to `EINVAL`.

### `read(2)`

Used to read the cube state.

The cube state is represented by 54 chars (6 faces times 9 pieces). The faces will be always be in that order `[up, left, front, right, back, down]`, for example the up face will always be in file positions `[0,8]` when reading. The order of the pieces on each face will be first the top row when looked directly at the face, and on each row will start from left to right.
So the face:

a b c\
d e f\
g h i

will be printed as `abcdefghi`.
* Reading from the file returns the content starting from the current file position
* If the file offset is at or past the end of file, no bytes are read, and `read` returns 0.
* A `read` with a count of 0 returns zero and has no other effects.
* When the user reads X bytes from the file, the file position will be increased by the number of bytes actually read.
* The file position can be greater than the string length.
* `read` should return the number of bytes read.

Errors should be handled in the following way and in this order:
1. When the buffer is too small, the read will copy only the available data and will return the number of bytes read.
2. If no data is available (for example when the file position is at the end), it will return 0.
3. If the pointer is invalid it will return -1 with errno set to `EFAULT`.

### `close(2)`
The `close` syscall does not have any effect on the state of the cube.

### `lseek(2)`
The `lseek` syscall used to change the file position.
* The user can change the file position via `lseek`
* Seeking beyond the end of the file is allowed
* Negative seek positions are not allowed and will return -1 with errno set to `EINVAL`
* Seeking sets the file position for subsequent read operations (and has no effect on write operations)
* Upon successful completion, the resulting offset, as measured in bytes from the beginning of the file, shall be returned
* You should support `SEEK_SET`, `SEEK_CUR` and `SEEK_END` with the same API as the in `man 3 lseek` [see here](https://linux.die.net/man/3/lseek)


## Notes
### Concurrency
In case of multiple opens, the opened descriptors would share the same state, and you should consider race conditions when accessing the data (for example 2 users rotating at the same time).