				=============================
				F0 - The Colors Of The Kernel
				=============================


Contents
========
(0)	Big Picture
(1)	File Position
(2)	Syscalls


Big Picture
===========
The module will be a canvas, of size 20 x 20:

	[ ][ ][ ][ ][ ]...[ ][ ][ ][ ][ ]
	[ ][ ][ ][ ][ ]...[ ][ ][ ][ ][ ]
	[ ][ ][ ][ ][ ]...[ ][ ][ ][ ][ ]
	...		...
	...		...
	...		...
	[ ][ ][ ][ ][ ]...[ ][ ][ ][ ][ ]
	[ ][ ][ ][ ][ ]...[ ][ ][ ][ ][ ]

Each pixle of the canvas can be painted in various colors:
	- Black		= 0
	- Red		= 1
	- Green		= 2
	- Yellow	= 3
	- Blue		= 4
	- Magenra	= 5
	- Cyan		= 6
	- White		= 7
	- Grey		= 8
	- Orange	= 9

Each color will have its own device file, <Color>_Brush, which will paint requested pixel\s.
Specification: There is one global canvas, but many device files, where each holds its own
file position.

A user-space proc will be able to interact with the canvas by invoking the syscalls:
	- Open
	- Read
	- Write
	- lseek
	- ioctl
	- close
	(see more in the syscall section)

The goal of the module is to allow such accessibility to the canvas, to multiple user-space
proc, concurrently, and produce images of the canvas.


File Position
=============
			==========================================
			Pixal on the canvas = Device file position
			==========================================
As you can imagine the file position will represent a pixel on the canvas.

For example, for a smaller canvas of size 3 x 3, the file position on the canvas can be
interpreted as:

					 -----------
					| 0 | 1 | 2 |
					 -----------
					| 3 | 4 | 5 |
					 -----------
					| 6 | 7 | 8 |
					 -----------

Note:
	It's not up to the module to care if a user is painting a nice picture...
	But it's nice to know how a user-space proc will view the module.


Syscalls
========
	Important note which won't be repeated:
	If at any syscall the file position is trying to point further than the last pixel
	the module should return 0, in order to tell the user that an EOF as been reached.


Write
=====
	Paints specific pixels on the canvas, with the color designated to the device file.

	The buffer's data does not mean anything, only it's size does.

	The module should paint the pixel from the current file position, either buff_size
	number of pixels, or until the end of the canvas.

	Meaning, If a certain device (X), at certain offset (Y) and a write buffer of size (Z)
	It's supposed to write Z bytes starting from cell Y at device X, which colors those pixels.

	Return value:
	-------------
		* Success: A non-negative integer representing the number of pixels that were
				successfully painted. Or 0 to represent EOF.
		* Argument errors: -EINVAL
		* Other errors: -EFAULT

	Simple user space example:
	--------------------------
		// assume file position is at 0
		int buf[10] = {0}; // don't care for the data, only size
		if (write(fd_blue_brush, buf, 10) != 10)
			panic();


Read
====
	Read the canvas into a buffer, from the current file position.
	Can accept a buffer of any size, but, can fill it up to the size of the canvas.

	Return value:
	-------------
		* Success: A non-negative integer representing the number of bytes that were
				successfully read. Or 0 to represent EOF.
		* Argument errors: -EINVAL
		* Other errors: -EFAULT

	Simple user space example:
	--------------------------
		int canvas[20][20] = {0}; //assume the fp is at 0
		if (read(fd, canvas, 20*20) != 20*20)
			panic();


lseek
=====
	Move file position to point at a different pixel.
	This should be the easiest method, because it should act almost exactly like a normal file.

	Return value:
	-------------
		* Success: 0
		* Argument errors: -EINVAL
		* Other errors: -EFAULT

	Simple user space example:
	--------------------------
		if (lseek(fd, 0, SEEK_END) != 20*20-1) // set fp to the last pixel.
			panic();


ioctl
=====
	ioctl 0 _IOW colors the entire canvas by a given color.
	Note: the file position does not have to be at the beginning!
		And the file position does not need to be changed!

	Return value:
	-------------
		* Success: 0
		* Unsupported command: -ENOTTY
		* Argument errors: -EINVAL (Should not receive any arguments)
		* Other errors: - EFAULT

		note: If both Unsupported command and Argument errors appear, any error return value will suffice.

	Simple user space example:
	--------------------------
		if (ioctl(fd_white, 0) == -1) // color the canvas in white
			panic();

END

Written by: yakir-david <yakir-david@spring2024-iit.kdlp.underground.software>
